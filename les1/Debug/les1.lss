
les1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000923  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00000c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d0  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006a  00000000  00000000  00001ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001d57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	aa d0       	rcall	.+340    	; 0x1fe <main>
  aa:	ae c0       	rjmp	.+348    	; 0x208 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <checkState>:
		}	
	checkState();
}

void checkState(){
	if((PINC == 0b01000000 && stateNum == 0 )||(PINC == 0b01000000 && stateNum == 2)){
  ae:	83 b3       	in	r24, 0x13	; 19
  b0:	80 34       	cpi	r24, 0x40	; 64
  b2:	31 f4       	brne	.+12     	; 0xc0 <checkState+0x12>
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  bc:	89 2b       	or	r24, r25
  be:	49 f0       	breq	.+18     	; 0xd2 <checkState+0x24>
  c0:	83 b3       	in	r24, 0x13	; 19
  c2:	80 34       	cpi	r24, 0x40	; 64
  c4:	69 f4       	brne	.+26     	; 0xe0 <checkState+0x32>
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ce:	02 97       	sbiw	r24, 0x02	; 2
  d0:	39 f4       	brne	.+14     	; 0xe0 <checkState+0x32>
		stateNum = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  de:	08 95       	ret
	}else if((PINC == 0b10000000 && stateNum == 1 )|| (PINC == 0b10000000 && stateNum == 4) || (PINC == 0b10000000 && stateNum == 3) || (PINC == 0b10000000 && stateNum == 2)){
  e0:	83 b3       	in	r24, 0x13	; 19
  e2:	80 38       	cpi	r24, 0x80	; 128
  e4:	31 f4       	brne	.+12     	; 0xf2 <checkState+0x44>
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	d9 f0       	breq	.+54     	; 0x128 <checkState+0x7a>
  f2:	83 b3       	in	r24, 0x13	; 19
  f4:	80 38       	cpi	r24, 0x80	; 128
  f6:	31 f4       	brne	.+12     	; 0x104 <checkState+0x56>
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 100:	04 97       	sbiw	r24, 0x04	; 4
 102:	91 f0       	breq	.+36     	; 0x128 <checkState+0x7a>
 104:	83 b3       	in	r24, 0x13	; 19
 106:	80 38       	cpi	r24, 0x80	; 128
 108:	31 f4       	brne	.+12     	; 0x116 <checkState+0x68>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 112:	03 97       	sbiw	r24, 0x03	; 3
 114:	49 f0       	breq	.+18     	; 0x128 <checkState+0x7a>
 116:	83 b3       	in	r24, 0x13	; 19
 118:	80 38       	cpi	r24, 0x80	; 128
 11a:	59 f4       	brne	.+22     	; 0x132 <checkState+0x84>
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 124:	02 97       	sbiw	r24, 0x02	; 2
 126:	29 f4       	brne	.+10     	; 0x132 <checkState+0x84>
		stateNum = 0;
 128:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 12c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 130:	08 95       	ret
	}else if((PINC == 0b00100000 && stateNum == 0 )|| (PINC == 0b00100000 && stateNum == 1)){
 132:	83 b3       	in	r24, 0x13	; 19
 134:	80 32       	cpi	r24, 0x20	; 32
 136:	31 f4       	brne	.+12     	; 0x144 <checkState+0x96>
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 140:	89 2b       	or	r24, r25
 142:	49 f0       	breq	.+18     	; 0x156 <checkState+0xa8>
 144:	83 b3       	in	r24, 0x13	; 19
 146:	80 32       	cpi	r24, 0x20	; 32
 148:	69 f4       	brne	.+26     	; 0x164 <checkState+0xb6>
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	39 f4       	brne	.+14     	; 0x164 <checkState+0xb6>
		stateNum = 2;
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 162:	08 95       	ret
	}else if(PINC == 0b00100000 && stateNum == 2){
 164:	83 b3       	in	r24, 0x13	; 19
 166:	80 32       	cpi	r24, 0x20	; 32
 168:	69 f4       	brne	.+26     	; 0x184 <checkState+0xd6>
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 172:	02 97       	sbiw	r24, 0x02	; 2
 174:	39 f4       	brne	.+14     	; 0x184 <checkState+0xd6>
		stateNum = 3;
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 182:	08 95       	ret
	}else if((PINC == 0b00100000 && stateNum == 3 )|| (PINC == 0b01000000 && stateNum == 3)){
 184:	83 b3       	in	r24, 0x13	; 19
 186:	80 32       	cpi	r24, 0x20	; 32
 188:	39 f4       	brne	.+14     	; 0x198 <checkState+0xea>
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 192:	03 97       	sbiw	r24, 0x03	; 3
 194:	89 f4       	brne	.+34     	; 0x1b8 <checkState+0x10a>
 196:	09 c0       	rjmp	.+18     	; 0x1aa <checkState+0xfc>
 198:	83 b3       	in	r24, 0x13	; 19
 19a:	80 34       	cpi	r24, 0x40	; 64
 19c:	71 f4       	brne	.+28     	; 0x1ba <checkState+0x10c>
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1a6:	03 97       	sbiw	r24, 0x03	; 3
 1a8:	41 f4       	brne	.+16     	; 0x1ba <checkState+0x10c>
		stateNum = 4;
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 1b6:	08 95       	ret
		stateNum = 0;
	}else if((PINC == 0b00100000 && stateNum == 0 )|| (PINC == 0b00100000 && stateNum == 1)){
		stateNum = 2;
	}else if(PINC == 0b00100000 && stateNum == 2){
		stateNum = 3;
	}else if((PINC == 0b00100000 && stateNum == 3 )|| (PINC == 0b01000000 && stateNum == 3)){
 1b8:	83 b3       	in	r24, 0x13	; 19
 1ba:	08 95       	ret

000001bc <opdracht7>:
	
	return 1;
}

void opdracht7 (){
		if(stateNum == 0){
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	19 f4       	brne	.+6      	; 0x1ce <opdracht7+0x12>
		PORTD = 0x01;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	82 bb       	out	0x12, r24	; 18
 1cc:	16 c0       	rjmp	.+44     	; 0x1fa <opdracht7+0x3e>
		}else if(stateNum == 1){
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	19 f4       	brne	.+6      	; 0x1da <opdracht7+0x1e>
		PORTD = 0x02;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	82 bb       	out	0x12, r24	; 18
 1d8:	10 c0       	rjmp	.+32     	; 0x1fa <opdracht7+0x3e>
		}else if(stateNum == 2){
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	91 05       	cpc	r25, r1
 1de:	19 f4       	brne	.+6      	; 0x1e6 <opdracht7+0x2a>
		PORTD = 0x04;
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	82 bb       	out	0x12, r24	; 18
 1e4:	0a c0       	rjmp	.+20     	; 0x1fa <opdracht7+0x3e>
		}else if(stateNum == 3){
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	91 05       	cpc	r25, r1
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <opdracht7+0x36>
		PORTD = 0x08;
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	82 bb       	out	0x12, r24	; 18
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <opdracht7+0x3e>
		}else if(stateNum == 4){
 1f2:	04 97       	sbiw	r24, 0x04	; 4
 1f4:	11 f4       	brne	.+4      	; 0x1fa <opdracht7+0x3e>
		PORTD = 0x10;
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	82 bb       	out	0x12, r24	; 18
		}	
	checkState();
 1fa:	59 cf       	rjmp	.-334    	; 0xae <checkState>
 1fc:	08 95       	ret

000001fe <main>:
void checkState();
void wait(int);
 
int main(void)
{
	DDRD = 0b11111111;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;
 202:	14 ba       	out	0x14, r1	; 20
	
    while (1) 
    {
		opdracht7();
 204:	db df       	rcall	.-74     	; 0x1bc <opdracht7>
 206:	fe cf       	rjmp	.-4      	; 0x204 <main+0x6>

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
