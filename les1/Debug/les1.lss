
les1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b65  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000909  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051b  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000483  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000267  00000000  00000000  000022a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000250a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	be d0       	rcall	.+380    	; 0x240 <main>
  c4:	c2 c0       	rjmp	.+388    	; 0x24a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <checkState>:
	Description: Checks which button is pressed to see which state the statemachine should be in
	Author: Gijs van Fessem & Frank Veraart
	Created: week 1
*/
void checkState(){
	if((PINC == 0b01000000 && stateNum == 0 )||(PINC == 0b01000000 && stateNum == 2)){
  c8:	83 b3       	in	r24, 0x13	; 19
  ca:	80 34       	cpi	r24, 0x40	; 64
  cc:	31 f4       	brne	.+12     	; 0xda <checkState+0x12>
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  d6:	89 2b       	or	r24, r25
  d8:	49 f0       	breq	.+18     	; 0xec <checkState+0x24>
  da:	83 b3       	in	r24, 0x13	; 19
  dc:	80 34       	cpi	r24, 0x40	; 64
  de:	69 f4       	brne	.+26     	; 0xfa <checkState+0x32>
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  e8:	02 97       	sbiw	r24, 0x02	; 2
  ea:	39 f4       	brne	.+14     	; 0xfa <checkState+0x32>
		stateNum = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
  f8:	08 95       	ret
	}else if((PINC == 0b10000000 && stateNum == 1 )|| (PINC == 0b10000000 && stateNum == 4) || (PINC == 0b10000000 && stateNum == 3) || (PINC == 0b10000000 && stateNum == 2)){
  fa:	83 b3       	in	r24, 0x13	; 19
  fc:	80 38       	cpi	r24, 0x80	; 128
  fe:	31 f4       	brne	.+12     	; 0x10c <checkState+0x44>
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	d9 f0       	breq	.+54     	; 0x142 <checkState+0x7a>
 10c:	83 b3       	in	r24, 0x13	; 19
 10e:	80 38       	cpi	r24, 0x80	; 128
 110:	31 f4       	brne	.+12     	; 0x11e <checkState+0x56>
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 11a:	04 97       	sbiw	r24, 0x04	; 4
 11c:	91 f0       	breq	.+36     	; 0x142 <checkState+0x7a>
 11e:	83 b3       	in	r24, 0x13	; 19
 120:	80 38       	cpi	r24, 0x80	; 128
 122:	31 f4       	brne	.+12     	; 0x130 <checkState+0x68>
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 12c:	03 97       	sbiw	r24, 0x03	; 3
 12e:	49 f0       	breq	.+18     	; 0x142 <checkState+0x7a>
 130:	83 b3       	in	r24, 0x13	; 19
 132:	80 38       	cpi	r24, 0x80	; 128
 134:	59 f4       	brne	.+22     	; 0x14c <checkState+0x84>
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 13e:	02 97       	sbiw	r24, 0x02	; 2
 140:	29 f4       	brne	.+10     	; 0x14c <checkState+0x84>
		stateNum = 0;
 142:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 146:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 14a:	08 95       	ret
	}else if((PINC == 0b00100000 && stateNum == 0 )|| (PINC == 0b00100000 && stateNum == 1)){
 14c:	83 b3       	in	r24, 0x13	; 19
 14e:	80 32       	cpi	r24, 0x20	; 32
 150:	31 f4       	brne	.+12     	; 0x15e <checkState+0x96>
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 15a:	89 2b       	or	r24, r25
 15c:	49 f0       	breq	.+18     	; 0x170 <checkState+0xa8>
 15e:	83 b3       	in	r24, 0x13	; 19
 160:	80 32       	cpi	r24, 0x20	; 32
 162:	69 f4       	brne	.+26     	; 0x17e <checkState+0xb6>
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 168:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	39 f4       	brne	.+14     	; 0x17e <checkState+0xb6>
		stateNum = 2;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 17c:	08 95       	ret
	}else if(PINC == 0b00100000 && stateNum == 2){
 17e:	83 b3       	in	r24, 0x13	; 19
 180:	80 32       	cpi	r24, 0x20	; 32
 182:	69 f4       	brne	.+26     	; 0x19e <checkState+0xd6>
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 188:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 18c:	02 97       	sbiw	r24, 0x02	; 2
 18e:	39 f4       	brne	.+14     	; 0x19e <checkState+0xd6>
		stateNum = 3;
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 19c:	08 95       	ret
	}else if((PINC == 0b00100000 && stateNum == 3 )|| (PINC == 0b01000000 && stateNum == 3)){
 19e:	83 b3       	in	r24, 0x13	; 19
 1a0:	80 32       	cpi	r24, 0x20	; 32
 1a2:	39 f4       	brne	.+14     	; 0x1b2 <checkState+0xea>
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1ac:	03 97       	sbiw	r24, 0x03	; 3
 1ae:	89 f4       	brne	.+34     	; 0x1d2 <checkState+0x10a>
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <checkState+0xfc>
 1b2:	83 b3       	in	r24, 0x13	; 19
 1b4:	80 34       	cpi	r24, 0x40	; 64
 1b6:	71 f4       	brne	.+28     	; 0x1d4 <checkState+0x10c>
 1b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1c0:	03 97       	sbiw	r24, 0x03	; 3
 1c2:	41 f4       	brne	.+16     	; 0x1d4 <checkState+0x10c>
		stateNum = 4;
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 1cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}
}
 1d0:	08 95       	ret
		stateNum = 0;
	}else if((PINC == 0b00100000 && stateNum == 0 )|| (PINC == 0b00100000 && stateNum == 1)){
		stateNum = 2;
	}else if(PINC == 0b00100000 && stateNum == 2){
		stateNum = 3;
	}else if((PINC == 0b00100000 && stateNum == 3 )|| (PINC == 0b01000000 && stateNum == 3)){
 1d2:	83 b3       	in	r24, 0x13	; 19
 1d4:	08 95       	ret

000001d6 <wait>:
	}
}

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 1d6:	18 16       	cp	r1, r24
 1d8:	19 06       	cpc	r1, r25
 1da:	6c f4       	brge	.+26     	; 0x1f6 <wait+0x20>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	e9 ef       	ldi	r30, 0xF9	; 249
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <wait+0xe>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <wait+0x14>
 1ea:	00 00       	nop
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	82 17       	cp	r24, r18
 1f2:	93 07       	cpc	r25, r19
 1f4:	a9 f7       	brne	.-22     	; 0x1e0 <wait+0xa>
 1f6:	08 95       	ret

000001f8 <opdracht7>:
	Description: Checks wich state the stamemachine is in and turns on the corresponding light
	Author: Gijs van Fessem & Frank Veraart
	Created: week 1
*/
void opdracht7 (){
		if(stateNum == 0){
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 200:	00 97       	sbiw	r24, 0x00	; 0
 202:	19 f4       	brne	.+6      	; 0x20a <opdracht7+0x12>
		PORTD = 0x01;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	82 bb       	out	0x12, r24	; 18
 208:	16 c0       	rjmp	.+44     	; 0x236 <opdracht7+0x3e>
		}else if(stateNum == 1){
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	91 05       	cpc	r25, r1
 20e:	19 f4       	brne	.+6      	; 0x216 <opdracht7+0x1e>
		PORTD = 0x02;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	82 bb       	out	0x12, r24	; 18
 214:	10 c0       	rjmp	.+32     	; 0x236 <opdracht7+0x3e>
		}else if(stateNum == 2){
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	91 05       	cpc	r25, r1
 21a:	19 f4       	brne	.+6      	; 0x222 <opdracht7+0x2a>
		PORTD = 0x04;
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	82 bb       	out	0x12, r24	; 18
 220:	0a c0       	rjmp	.+20     	; 0x236 <opdracht7+0x3e>
		}else if(stateNum == 3){
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	91 05       	cpc	r25, r1
 226:	19 f4       	brne	.+6      	; 0x22e <opdracht7+0x36>
		PORTD = 0x08;
 228:	88 e0       	ldi	r24, 0x08	; 8
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	04 c0       	rjmp	.+8      	; 0x236 <opdracht7+0x3e>
		}else if(stateNum == 4){
 22e:	04 97       	sbiw	r24, 0x04	; 4
 230:	11 f4       	brne	.+4      	; 0x236 <opdracht7+0x3e>
		PORTD = 0x10;
 232:	80 e1       	ldi	r24, 0x10	; 16
 234:	82 bb       	out	0x12, r24	; 18
		}	
	wait(500);
 236:	84 ef       	ldi	r24, 0xF4	; 244
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	cd df       	rcall	.-102    	; 0x1d6 <wait>
	checkState();
 23c:	45 cf       	rjmp	.-374    	; 0xc8 <checkState>
 23e:	08 95       	ret

00000240 <main>:
 240:	8f ef       	ldi	r24, 0xFF	; 255
void opdracht7();
void opdracht6();
 
int main(void)
{
	DDRD = 0b11111111;
 242:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;
 244:	14 ba       	out	0x14, r1	; 20
	
    while (1) 
    {
		opdracht7();
 246:	d8 df       	rcall	.-80     	; 0x1f8 <opdracht7>
 248:	fe cf       	rjmp	.-4      	; 0x246 <main+0x6>

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
